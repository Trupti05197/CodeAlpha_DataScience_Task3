# -*- coding: utf-8 -*-
"""Task_3_Sales prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N4d9A4czqi6YBmYhvVvRWbwXrRLeTcX6
"""

#Import libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score

#Read and load data:
df = pd.read_csv('/content/drive/MyDrive/CodeAlpha_Internship/Advertising.csv')
df.head()

df.isnull().sum() #Missing values

df.describe() #Summary statistics

df.info()

#Rename column
df.rename(columns={'Unnamed: 0': 'Index'}, inplace=True)
df

#Scatter plot for independent variables(Newspaper,TV,Radio) and dependent variable(Sales)
sns.pairplot(df, x_vars=["Newspaper", "TV", "Radio"], y_vars="Sales",kind='reg')

# Split the data into train and test sets
X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit linear regression model
model = LinearRegression()
model.fit(X_train, y_train)
print('Coefficients:',model.coef_)
print('Intercept:',model.intercept_)

# Calculate MSE, RMSE, R-Squared values
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")
rmse = np.sqrt(mse)
print(f"Root Mean Squared Error: {rmse:.2f}")
r2 = r2_score(y_test, y_pred)
print(f"R-squared: {r2:.2f}")

# Plot for actual and predicted sales
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, c='blue', marker='o', alpha=0.7, label='Actual vs. Predicted Sales')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle='--', color='red', linewidth=2, label='Perfect Fit')
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual Sales vs. Predicted Sales")
plt.legend(loc='upper left')
plt.grid(True)
plt.show()

# Make predictions on new data
new_data = pd.DataFrame({'TV': [150], 'Radio': [80], 'Newspaper': [50]})
new_predictions = model.predict(new_data[['TV', 'Radio', 'Newspaper']])
print("Predictions for New Data:")
print(new_predictions)



